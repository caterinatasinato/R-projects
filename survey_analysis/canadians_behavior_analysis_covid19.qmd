---
title: "Post-COVID-19 Readiness in Canada: Demographics and Activity Insights"
author: "Caterina Tasinato"
format: pdf
---

# DATA PROCESSING

```{r message = FALSE, messages = FALSE, warning = FALSE}
# Load 'tidyverse' library
library(tidyverse)

# Load 'showtext' library
library(showtext)

# Add Google font Montserrat
font_add_google("montserrat")

# Enable showtext to use the fonts
showtext_auto()
```

```{r}
# Import the dataset from the specified file path into a data frame
survey <- read.csv("~/Desktop/DOCUMENTS/ds_research_data.csv", header=TRUE)

# View the data to verify the results 
View(survey)
```

```{r message = FALSE, messages = FALSE, warning = FALSE}
# Remove the first 2 rows (question id, question name)
survey <- survey[-c(1, 2), ]

# View the data to verify the results 
View(survey)
```

```{r results = "hide"}
# Check data information
glimpse(survey) # 1588 rows, 129 columns
```

```{r results = "hide"}
# Count missing values for 'gender' and 'province'from the source data
missing_gender <- survey %>% 
  summarise(missing_gender = sum(is.na(gender)))

missing_province <- survey %>% 
  summarise(missing_province = sum(is.na(Province)))

# Inspect unique values for 'gender' and 'province'from the source data
unique_genders <- unique(survey$gender)
unique_provinces <- unique(survey$Province)

# Print results
missing_gender    # No missing values 
missing_province  # No missing values
unique_genders    # 'Male', 'Female', 'I prefer not to say', 'Other'
unique_provinces  # 10 Provinces + Territories
```

```{r}
# Transform data to create a subset 
province_sample <- survey%>%
  # Rename the 'Province' column to 'province'
  rename(province = Province) %>%
  # Filter 'gender' and recode 'province'
  filter(gender %in% c("Male", "Female")) %>%
  # Recode certain province names in the 'province' column
  mutate(province = recode(province, 
                           "BC" = "BC and Territories", 
                           "Territories" = "BC and Territories",
                           "NovaScotia" = "Nova Scotia",
                           "NewBrunswick" = "New Brunswick")) %>%
  
  # Group by 'province' and 'gender', then count occurrences
  group_by(province, gender) %>%
  summarise(count = n()) %>%
  
  # Calculate total and percentages of 'gender' within each province
  group_by(province) %>%
  mutate(total = sum(count),
         percentage = round((count / total) * 100)) %>%
  ungroup()

# Create a summary for the full sample across provinces
full_sample <- survey %>%
  filter(gender %in% c("Male", "Female")) %>%
  group_by(gender) %>%
  summarise(count = n()) %>%
  mutate(total = sum(count),
         percentage = round((count / total) * 100),
         province = "Full Sample")

# Combine the province sample and full sample data into a dataset
demographics <- bind_rows(province_sample, full_sample)
 
# View the results 
View(demographics) # 1583 values due to 5 excluded participants 
```

```{r}
# Set the desired order of 'province' levels for plotting 
demographics$province <- factor(demographics$province, 
                                levels = c("Saskatchewan", 
                                           "Quebec", 
                                           "PEI", 
                                           "Ontario", 
                                           "Nova Scotia", 
                                           "Newfoundland", 
                                           "New Brunswick",
                                           "Manitoba", 
                                           "BC and Territories",
                                           "Alberta", 
                                           "Full Sample"))

# Convert 'gender' to a factor
demographics$gender <- as.factor(demographics$gender)
```

```{r message = FALSE, messages = FALSE, warning = FALSE}
#| fig.width= 11, fig.height=7, fig.dpi=300
# Plotting gender distribution across Canadian provinces and territories
ggplot(demographics, aes(province, count, fill = gender)) +
  
  # Create bar plot for each province to show proportions
  geom_bar(stat = "identity", position = "fill",  color = "white", width = 0.8) +
  
  # Add percentage value inside bars
  geom_text(aes(label = paste0(percentage, "%")), 
            position = position_fill(vjust = 0.5), 
            size = 4.5, color = "white", family = "montserrat", 
            face = "bold") +
  
  # Add plot title and remove axis titles (set to NULL)
  labs(title = "Gender distribution across Canadian provinces and territories",
       x = NULL, y = NULL, fill = NULL) + 
  
  # Remove y-axis labels and breaks
  scale_y_continuous(labels = NULL, breaks = NULL) +
  
  # Customize x-axis labels
  scale_x_discrete(labels = function(x) {
    ifelse(x == "Full Sample", expression(bold("Full Sample")), x)
  }) +
  
  # Customize fill colors and order labels
  scale_fill_manual(values = c("Male" = "#080757", "Female" = "#D13060"),
                    # Set the order of legend items
                    breaks = c("Male", "Female")) +
  
  # Apply minimal theme
  theme_minimal() +
  
  # Flip the coordinates to switch the bars to a horizontal orientation
  coord_flip() +
  
  # Additional theme personalizations
  theme(
    text = element_text(family = "montserrat"),
    axis.text.y = element_text(size = 14, color = "#27272e"),
    plot.title = element_text(size = 18, color = "black", face = "bold"),
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),
    legend.position = "bottom",  
    legend.title = element_blank(),  
    legend.text = element_text(size = 14, color = "#27272e")
    )
```

```{r}
# Transform data for the analysis by creating a subset
whenready <- survey %>%
  # Transform from wide to long format to create 'behavior' & 'response' columns
  pivot_longer(cols = starts_with("whenready_"),
               names_to = "behavior",
               values_to = "response") %>%
  
  # Convert behavior codes to more descriptive labels
  mutate(
    behavior = case_when(
      behavior == "whenready_1" ~ "Domestic Business Flights",
      behavior == "whenready_2" ~ "International Business Flights",
      behavior == "whenready_3" ~ "Domestic Leisure Flights",
      behavior == "whenready_4" ~ "International Leisure Flights",
      behavior == "whenready_5" ~ "In-Person Shopping",
      behavior == "whenready_6" ~ "Return to Workplace",
      behavior == "whenready_7" ~ "Eat at Restaurants", 
      behavior == "whenready_8" ~ "Go to Bars or Clubs",
      behavior == "whenready_9" ~ "Public Events",
      behavior == "whenready_10" ~ "Public Transport"
    ),
    
    # Clean and shorten responses
    response = str_replace_all(response, "\\t+", ""), 
    response = str_trim(response),
    response = case_when(
      response == "I am already ready or doing it" ~ "Already doing it",
      response == "In 1-3 months" ~ "In 1-3 months",
      response == "In 3-6 months" ~ "In 3-6 months",
      response == "In more than 6 months" ~ "In 6+ months",
      response == "When a vaccine will be ready or the virus will have disappeared" 
      ~ "After vaccine or virus gone",
      response == "I donâ€™t foresee a time when I will be ready to do it again" 
      ~ "No foreseeable time",
      response == "Not applicable for me" ~ "Not Applicable"
    ),
    
    # Calculate age, create 'age' column and create 'age group' column
    age = as.numeric(format(Sys.Date(), "%Y")) - as.numeric(birthyear), 
    age_group = case_when(
      age >= 18 & age <= 34 ~ "18 - 34 years",
      age >= 35 & age <= 49 ~ "35 - 49 years",
      age >= 50 & age <= 64 ~ "50 - 64 years",
      age >= 65 ~ "65+ years",
      TRUE ~ NA_character_  
    )
  ) %>%
  
  # Move columns in the desired sequence
  select(birthyear, age, age_group, behavior, response)

# View the data to verify the results 
View(whenready)
```

```{r results = "hide"}
# Count the number of missing values in the 'age_group' column
missing_age_group <- whenready %>% 
  summarise(missing_age_group = sum(is.na(age_group)))

#Count the number of missing values in the 'response' column
missing_response <- whenready %>% 
  summarise(missing_response = sum(is.na(response)))

# Print results
missing_age_group # No missing values
missing_response # 10 missing values due to a dormient participant
```

```{r}
# Transform data for analysis 
whenready_general <- whenready %>%
  # Filter out rows with missing 'response' values
  filter(!is.na(response)) %>%
  # Keep rows with meaningul 'response'
  filter(response %in% c("Already doing it", 
                         "In 1-3 months", 
                         "In 3-6 months", 
                         "In 6+ months",  
                         "After vaccine or virus gone",
                         "No foreseeable time")) %>%
  
  # Group by 'behavior' and 'response' to count occurrences
  group_by(behavior, response) %>%
  summarise(count = n()) %>%
  
  # Calculate total responses and percentages for each 'behavior'
  group_by(behavior) %>%
  mutate(total = sum(count),
         percentage = round((count / total) * 100, 2)) %>%
  
  # Remove grouping to return to a standard data frame
  ungroup()

# View the data to verify the results 
View(whenready_general)
```

```{r}
# Recode 'behavior' in the desidered order for plotting
whenready_general$behavior <- factor(whenready_general$behavior, 
                                levels = c("International Leisure Flights",
                                           "International Business Flights",
                                           "Domestic Leisure Flights",
                                           "Domestic Business Flights",  
                                           "Public Events",
                                           "Go to Bars or Clubs",
                                           "Public Transport", 
                                           "Eat at Restaurants", 
                                           "Return to Workplace", 
                                           "In-Person Shopping"))

# Recode 'response' to reflect the desired order of readiness levels
whenready_general$response <- factor(whenready_general$response,
                                     levels = c("No foreseeable time",
                                                "After vaccine or virus gone",
                                                "In 6+ months",
                                                "In 3-6 months",
                                                "In 1-3 months",
                                                "Already doing it"))
```

```{r message = FALSE, messages = FALSE, warning = FALSE}
#| fig.width=12, fig.height=7, fig.dpi=300
# Plotting percentages of responses across behaviors 
ggplot(whenready_general, aes(behavior, count, fill = response)) +
  
  # Create a barchart for each behavior to show proportions
  geom_bar(stat = "identity", position = "fill", color = "black", 
           size = 0.2, width = 0.8) +
  
  # Add percentage labels inside the bars
  geom_text(aes(label = paste0(round(percentage), "%")), 
            position = position_fill(vjust = 0.5), 
            size = 4.5, color = "black", family = "montserrat") +
  
  # Add a title to the plot, and set axis labels to NULL (no labels)
  labs(title = "Are Canadians ready to resume their behaviors after COVID-19?\nThe general overview",
       x = NULL, y = NULL, fill = NULL) +
    
 # Apply a black and white theme for a clean look
  theme_minimal() +
  
  # Flip the coordinates to switch the bars to a horizontal orientation
  coord_flip() +
  
  # Remove y-axis labels and breaks
  scale_y_continuous(labels = NULL, breaks = NULL) +
  
  # Manually set the colors for each level of the 'response' variable
  scale_fill_manual(values = c("Already doing it" = "#45b39d",
                               "In 1-3 months" = "#76d7c4",
                               "In 3-6 months" = "#a9dfbf",
                               "In 6+ months" = "#e7f7de",
                               "After vaccine or virus gone" = "#f5b7b1",
                               "No foreseeable time" = "#ec7063"),
                    
                    # Set the order of legend items
                    breaks = c("Already doing it", 
                               "In 1-3 months",
                               "In 3-6 months",
                               "In 6+ months", 
                               "After vaccine or virus gone",
                               "No foreseeable time")) +
  
  # Customize the appearance of the text and other barchart elements
  theme(
    text = element_text(family = "montserrat"),
    axis.text.y = element_text(size = 14, color = "#27272e"),         
    axis.text.x = element_text(size = 14, color = "#27272e"),              
    plot.title = element_text(size = 18, color = "black", face = "bold"),
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),    
    legend.position = "bottom",                         
    legend.text = element_text(size = 14),               
    legend.spacing.x = unit(0.5, 'cm'),
    legend.spacing.y = unit(1, 'cm')
    )+
  
  # Configure the legend to be displayed in a single row
  guides(fill = guide_legend(nrow = 2))
```

```{r}
# Transform and prepare data for a more specific analysis
whenready_specific <- whenready %>%
  # Filter out rows with missing 'response' values
  filter(!is.na(response)) %>%
  # Keep only rows with meaningul 'response'
  filter(response %in% c("Already doing it", 
                         "In 1-3 months", 
                         "In 3-6 months", 
                         "In 6+ months",  
                         "After vaccine or virus gone",
                         "No foreseeable time")) %>%
  
  # Group by 'behavior', 'age_group', and 'response' to count occurrences
  group_by(behavior, age_group, response) %>%
  summarise(count = n()) %>%
  
  # Calculate total responses and percentages for each 'behavior' divided by 'age_group'
  group_by(age_group, behavior) %>%
  mutate(total = sum(count),
         percentage = round((count / total) * 100, 2)) %>%
  
  # Remove the grouping to get a standard data frame
  ungroup()

View(whenready_specific)
```

```{r}
# Recode the 'behavior' variable to specify the desired order for plotting
whenready_specific$behavior <- factor(whenready_specific$behavior, 
                                      levels = c("International Leisure Flights",
                                                 "International Business Flights",
                                                 "Domestic Leisure Flights",
                                                 "Domestic Business Flights",  
                                                 "Public Events",
                                                 "Go to Bars or Clubs",
                                                 "Public Transport", 
                                                 "Eat at Restaurants", 
                                                 "Return to Workplace", 
                                                 "In-Person Shopping")) 

#Recode the 'response' variable to specify the desired order for plotting
whenready_specific$response <- factor(whenready_specific$response,
                                      levels = c("No foreseeable time",
                                                 "After vaccine or virus gone",
                                                 "In 6+ months",
                                                 "In 3-6 months",
                                                 "In 1-3 months",
                                                 "Already doing it"))

# Recode variable 'age' group in the desidered order for plotting
whenready_specific$age_group <- factor(whenready_specific$age_group,
                                       levels = c("18 - 34 years",
                                                  "35 - 49 years",
                                                  "50 - 64 years",
                                                  "65+ years" ))
```

```{r}
#| fig.width =12, fig.height=12, fig.dpi=300
# Create a bar chart with ggplot2
ggplot(whenready_specific, aes(behavior, count, fill = response)) +
  
  # Use a fill bar chart with specified border color, size, and width
  geom_bar(stat = "identity", position = "fill", color = "black", size = 0.2, width = 0.6) +
  
   # Add percentage labels inside the bars only if > 10
   geom_text(aes(label = ifelse(percentage > 10, paste0(round(percentage), "%"), "")), 
            position = position_fill(vjust = 0.5), 
            size = 4.5, color = "#27272e", family = "montserrat") +
  
  # Add a title to the plot, and set axis labels to NULL (no labels displayed)
  labs(title = "Are Canadians ready to resume their behaviors after COVID-19? \nSome differences across age groups",
       x = NULL, y = NULL, fill = NULL) +
  
  # Remove y-axis labels and breaks
  scale_y_continuous(labels = NULL, breaks = NULL) +
  
  # Flip the coordinates to make the bars horizontal
  coord_flip() +
  
  # Manually set the fill colors for each level of the 'response' variable
  scale_fill_manual(values = c("Already doing it" = "#45b39d",
                               "In 1-3 months" = "#76d7c4",
                               "In 3-6 months" = "#a9dfbf",
                               "In 6+ months" = "#e7f7de",
                               "After vaccine or virus gone" = "#f5b7b1",
                               "No foreseeable time" = "#ec7063"),
                    
                    # Define the order of legend items
                    breaks = c("Already doing it", 
                               "In 1-3 months",
                               "In 3-6 months",
                               "In 6+ months", 
                               "After vaccine or virus gone",
                               "No foreseeable time")) +
  # Apply a black and white theme for a clean visual appearance
  theme_bw() +
  
  # Customize the appearance of text, axes, and other plot elements
  theme(
    text = element_text(family = "montserrat"),
    axis.text.y = element_text(size = 14, color = "#27272e"),             
    axis.text.x = element_text(size = 14, color = "#27272e"),             
    plot.title = element_text(size = 18, face = "bold"), 
    plot.margin = margin(1, 0.5, 0.5, 0.5, "cm"),   
    legend.position = "bottom",                       
    legend.text = element_text(size = 14),             
    legend.spacing.x = unit(0.1, 'cm'),               
    strip.text = element_text(size = 14),           
    panel.spacing = unit(0.75, "cm")   
  ) +
  
  # Configure the legend to display in a single row
  guides(fill = guide_legend(nrow = 2)) +
  
  # Use facet_wrap to create separate panels for each age_group
  facet_wrap(~ age_group, ncol = 2, scales = "free_x")
```
